# Model 2

As confirmed by model 1, the grouping of analytes is related to the degree of dissociation of compounds. Hence, model 2 takes into account the $pK_a$ information of the substances contained in the sample by determining the dissociated and neutral fractions.

For a monoprotic acid, the logarithm of the ratio of the ionized form to the neutral one at a particular pH = 2.66 is given by:
\begin{align*}
\log\left(\frac{fr'_{i}}{1-fr'_{i}}\right) = pH-pK_{a,i}
\end{align*}

where $fr'_{i}$ denotes the ratio of ionized to total concentration of a compound ($\frac{[A^-]}{[A^-]+[HA]}$) as predicted using $pK_a$ from ACD/Labs software. Since $pK_a$ and pH are measured with an error, it is convenient to introduce an error term at the scale of (pH and $pK_a$) and convert back to the adjusted fraction denoted $fr_{i}$:
\begin{gather*}
    fr_{i}=\frac{1}{1+10^{-{\left(\log\left(\frac{fr'_i}{1-fr'_i}\right)+\eta_i\right)}}},  \\
\eta_i \sim t\textnormal{-Student}(7,0,0.1) 
\end{gather*}

where $\eta_i$ is a random variable corresponding to the error described by Student's $t$-distribution with a mean of 0, standard deviation of 0.1, and 7 degrees of freedom. A very small scale was used to indicate that the most likely $pK_a$ values are close to the true values (accurately predicted by ACD/Labs program). Nevertheless, the presence of some outlying values was handled by Student's $t$-distribution. The reasoning presented here for the monoprotic analytes was extended to polyprotic analytes as shown in the Supporting Information.

This model estimates the parameters $\log k_w$, $\log k_a$, and $\log S_2$ as the following sum, taking into account the analyte-specific $fr_{i}$ values:
\begin{align*}
\begin{bsmallmatrix}
\log{k_{w,i}}  \\
\log{k_{a,i}} \\
\log{S_{2,i}}
\end{bsmallmatrix}=& \,fr_{i} \cdot   \text{MST}\left(7,   \begin{bsmallmatrix}
 &\theta_{\log{k_{w_1}}} +\beta_{\log k_{w_{1}}} \cdot \log{P_i}, & \\
 & \theta_{\log{k_{a_1}}} +\beta_{\log k_{a_{1}}} \cdot \log{P_i}, &  \\
& \theta_{\log{S_{2_1}}} +\beta_{\log S_{2_{1}}} \cdot \log{P_i}, &
\end{bsmallmatrix}, \Omega_1\right) + \\
+& \, (1-fr_{i}) \cdot \text{MST}\left(7, \begin{bsmallmatrix}
 &\theta_{\log{k_{w_2}}} +\beta_{\log k_{w_{2}}} \cdot \log{P_i}, & \\
&\theta_{\log{k_{a_2}}} +\beta_{\log k_{a_{2}}} \cdot \log{P_i}, & \\
& \theta_{\log{S_{2_2}}} +\beta_{\log S_{2_{2}}} \cdot \log{P_i}, &
\end{bsmallmatrix},  \Omega_2 \right).
\end{align*}
It should be noted that this is a simplification. Theoretically, the retention factor should be expressed by:
\begin{align*}
    k_{i} =fr_{i} \cdot k_{ionized} +(1-fr_{i}) \cdot k_{neutral} .
\end{align*} 
Nevertheless, for this particular data, the formulas are practically equivalent, since almost all compounds exist either as neutral or as dissociated form. Only 14\% of analytes are expected to be partially dissociated ($<$90\% of the neutral or dissociated form present in a solution). Clearly, to fully elucidate the effects of pH on retention, more extensive data are needed, e.g., those collected for a wide range of pH values of the mobile phase.

## Priors

In this model, the same priors as in the model 1 were adopted.

\begin{align*}
\theta_{\log k_{w_1}} \sim N(1.054, 1.136),  \quad \theta_{\log k_{w_2}} \sim N(2.053, 1.487),\\
\theta_{\log k_{a_1}} \sim N(-3.437, 1.062), \quad \theta_{\log k_{a_2}} \sim N(-1.885, 1.006),\\
\theta_{\log S_{2_1}},  \sim N(\log 2,0.2), \quad \theta_{\log S_{2_2}},  \sim N(\log 2,0.2), \\
\beta_{\log k_{w_1}} \sim N(0.7,0.25), \quad \beta_{\log k_{w_2}} \sim N(0.7,0.25),\\
\beta_{\log k_{a_1}} \sim N(0.3,0.25), \quad \beta_{\log k_{a_2}} \sim N(0.3,0.25), \\
\beta_{\log S_{2_1}} \sim N(0,0.25), \quad \beta_{\log S_{2_2}} \sim N(0,0.25), \\
\text{logPmissing} \sim N(2.56,1.92), \\
\omega_{\log k_{w_1}}\sim \textnormal{N}_{+}(0,1.136),  \, \omega_{\log k_{a_1}}\sim \textnormal{N}_{+}(0,1.487), \, \omega_{\log S_{2_1}}\sim \textnormal{N}_{+}(0,0.2), \\ \omega_{\log k_{w_2}}\sim \textnormal{N}_{+}(0,1.062), \, \omega_{\log k_{a_2}}\sim \textnormal{N}_{+}(0,1.006), \, \omega_{\log S_{2_2}} \sim \textnormal{N}_{+}(0,0.2), \\
\begin{bmatrix}
 1 & \rho_{1,2_1} & \rho_{1,3_1} \\
 \rho_{2,1_1} & 1 & \rho_{2,3_1} \\
 \rho_{3,1_1} & \rho_{3,2_1} & 1 
 \end{bmatrix}, \begin{bmatrix}
1 & \rho_{1,2_2} & \rho_{1,3_2} \\
 \rho_{2,1_2} & 1 & \rho_{2,3_2} \\
 \rho_{3,1_2} & \rho_{3,2_2} & 1 
 \end{bmatrix} \sim LKJ(1), \\
\sigma \sim \textnormal{N}_{+}(0,0.067).
\end{align*}

Due to the implementation of the model in the program, the state was assumed and using the built-in inv_logit function ( $\text{inv_logit}(u)=\frac{1}{1+e^{-u}}$), it was assumed that:
   
\begin{align*}
\eta \sim \textnormal{Student t}(7,0,0.23).
\end{align*}

## Analysis

Model was constructed and implemented in the Stan program.

```{stan output.var="initial_model", eval = FALSE}
functions{
  real hplcmodel(real fi, real logkw, real logka, real logS2A){
    
    real logk;					// retention factor
    real S1;						// slope coefficient
    
    S1 = (logkw - logka)*(1+10^logS2A);
    logk = logkw - S1 * fi / (1 + 10^logS2A * fi);
    
    return logk;
  }
}

data{
  int nAnalytes;			  // number of analytes
  int nObs;				    	// number of observations
  int analyte[nObs];		// analytes indexes
  vector[nObs] logkObs;	// observed retention factors
  vector[nObs] fi;			// organic modifier content in the mobile phase
  real logP[nAnalytes];         // molecular descriptor      
  int idxmissing[nAnalytes];    // indexes of logP missing value
  real<lower=0, upper=1> rawlambdai[nAnalytes];  // ratio of ionized to total concentration of a compound
  
  int nfiplot;								  // number of fi for plotting
  vector[nfiplot] fiplot;				// organic modifier content in the mobile phase
  
  int<lower = 0, upper = 1> run_estimation; // 0 for prior predictive, 1 for estimation
}


transformed data {
  real oddsi[nAnalytes];
 
for(j in 1:nAnalytes){
  oddsi[j] = logit(rawlambdai[j]);
}
}

parameters{
  ordered[2] logkwHat;					// mean value of logkw in population
  ordered[2] logkaHat;          // mean value of logka in population
  vector[2] logS2AHat;					// mean curvature coefficient for acetonitrile in population

  real<lower = 0> sigma;					// standard deviation for residuals
  vector<lower = 0>[3] omega1;		// diagonal elements of variance-covariance matrix 
  corr_matrix[3] rho1;					  // correlation matrix
  vector<lower = 0>[3] omega2;	  // diagonal elements of variance-covariance matrix 
  corr_matrix[3] rho2;						// correlation matrix
  real beta[6];									  // coefficient value for molecular descriptor
  real logPmissing[nAnalytes];    // logP Missing values
  vector[3] param1[nAnalytes];
  vector[3] param2[nAnalytes];
  real eta[nAnalytes];
}

transformed parameters{
 
  vector[3] miu1[nAnalytes];	 
  vector[3] miu2[nAnalytes];	 
  real logka[nAnalytes];     // mean value of logka in population
  real logkw[nAnalytes];     // mean value of logkw in population
  real logS2A[nAnalytes];    // mean curvature coefficient for acetonitrile in population
  cov_matrix[3] Omega1;			 // variance-covariance matrix
  cov_matrix[3] Omega2;			 // variance-covariance matrix
  vector[nObs] logkHat;			 // mean value of logk in population
  real<lower=0, upper=1> frac[nAnalytes];

  Omega1 = quad_form_diag(rho1, omega1);	// diag_matrix(omega) * rho * diag_matrix(omega)
  Omega2 = quad_form_diag(rho2, omega2);	// diag_matrix(omega) * rho * diag_matrix(omega)

  for(j in 1:nAnalytes){
    miu1[j,1]  = logkwHat[1]  +  beta[1] * ((1-idxmissing[j])*logP[j]+idxmissing[j]*logPmissing[j]);
    miu2[j,1]  = logkwHat[2]  +  beta[2] * ((1-idxmissing[j])*logP[j]+idxmissing[j]*logPmissing[j]);
    miu1[j,2]  = logkaHat[1]  +  beta[3] * ((1-idxmissing[j])*logP[j]+idxmissing[j]*logPmissing[j]); 
    miu2[j,2]  = logkaHat[2]  +  beta[4] * ((1-idxmissing[j])*logP[j]+idxmissing[j]*logPmissing[j]); 
    miu1[j,3]  = logS2AHat[1] +  beta[5] * ((1-idxmissing[j])*logP[j]+idxmissing[j]*logPmissing[j]);
    miu2[j,3]  = logS2AHat[2] +  beta[6] * ((1-idxmissing[j])*logP[j]+idxmissing[j]*logPmissing[j]);
    frac[j]  = inv_logit(oddsi[j] + eta[j]);
  }

	for(j in 1:nAnalytes){
	logkw[j]  = param1[j, 1]*frac[j] + param2[j, 1]*(1-frac[j]);
	logka[j]  = param1[j, 2]*frac[j] + param2[j, 2]*(1-frac[j]);
	logS2A[j] = param1[j, 3]*frac[j] + param2[j, 3]*(1-frac[j]);
	}
  

  for(i in 1:nObs){
    logkHat[i] = hplcmodel(fi[i], logkw[analyte[i]], logka[analyte[i]], logS2A[analyte[i]]);
 }
  
}
model{
  
  logkwHat[1]  ~ normal(1.054, 1.136);
  logkwHat[2]  ~ normal(2.053, 1.487);
  logkaHat[1]  ~ normal(-3.437, 1.062);
  logkaHat[2]  ~ normal(-1.885, 1.006);
  logS2AHat[1] ~ normal(log10(2), 0.2);
  logS2AHat[2] ~ normal(log10(2), 0.2);

  beta[1] ~ normal(0.7,0.25);
  beta[2] ~ normal(0.7,0.25);
  beta[3] ~ normal(0.3,0.25);
  beta[4] ~ normal(0.3,0.25);
  beta[5] ~ normal(0,0.25);
  beta[6] ~ normal(0,0.25);

  logPmissing ~ normal(2.56,1.92); // based on logP fit

  eta ~ student_t(7,0,0.23);

  omega1[1] ~ normal(0,1.136);
  omega1[2] ~ normal(0,1.487);
  omega1[3] ~ normal(0,0.2);
  rho1   ~ lkj_corr(1);
  omega2[1] ~ normal(0,1.062);
  omega2[2] ~ normal(0,1.006);
  omega2[3] ~ normal(0,0.2);
  rho2	 ~ lkj_corr(1);
  sigma	 ~ normal(0,0.067);

  for(i in  1:nAnalytes){
  param1[i] ~ multi_student_t(7, miu1[i],Omega1);
  param2[i] ~ multi_student_t(7, miu2[i],Omega2);
  }
  
  if(run_estimation==1){
  logkObs ~ student_t(7,logkHat, sigma);	// observations
  }
}

generated quantities{

  real logkCond[nObs];
  real log_lik[nObs];
  real log_likPred[nObs];
  real logkHatPred[nObs];
  real logkaPred[nAnalytes];
  real logkwPred[nAnalytes];
  real logS2APred[nAnalytes];
  real<lower=0, upper=1> fracPred[nAnalytes];
  
  matrix[nAnalytes,nfiplot] logkHatPlotACond;
  matrix[nAnalytes,nfiplot] logkPlotACond;

  vector[3] paramPred1[nAnalytes];	 
  vector[3] paramPred2[nAnalytes];
  
  for(j in 1:nAnalytes){

  real etaPred[nAnalytes];

  etaPred[j] = student_t_rng(7,0, 0.23);
  fracPred[j]  = inv_logit(oddsi[j] + etaPred[j]);
  
  paramPred1[j] =  multi_student_t_rng(7,miu1[j],Omega1);
  paramPred2[j] =  multi_student_t_rng(7,miu2[j],Omega2);

  logkwPred[j]  = paramPred1[j, 1]*fracPred[j] + paramPred2[j, 1]*(1-fracPred[j]);
  logkaPred[j]  = paramPred1[j, 2]*fracPred[j] + paramPred2[j, 2]*(1-fracPred[j]);
  logS2APred[j] = paramPred1[j, 3]*fracPred[j] + paramPred2[j, 3]*(1-fracPred[j]);
  }
  
  for(i in 1:nObs){
    logkCond[i] = student_t_rng(7,logkHat[i], sigma);
    log_lik[i]	= student_t_lpdf(logkObs[i] | 7,logkHat[i], sigma);
    logkHatPred[i]	= hplcmodel(fi[i], logkwPred[analyte[i]], logkaPred[analyte[i]], logS2APred[analyte[i]]);
    log_likPred[i] = student_t_lpdf(logkObs[i] | 7,logkHatPred[i], sigma); 

  }
}
```

Then, the data was added to it and the initial values of the model parameters were determined. In the end, the model was fitted.

```{r message=FALSE}
# load packages
library(pracma)
library(dplyr)
library(ggplot2)
require(gridExtra)
library(GGally)
library(cmdstanr)
library(rstan)
library(knitr)
library(reshape2)
library(bayesplot)
library(posterior)

# load data
DS       <- read.csv(here::here("1_data/database_stan_1026.csv"),header = TRUE, sep = ";", dec = ".")
DS_names <- read.csv(here::here("1_data/database_stan_1026_analyte_names.csv"),header = TRUE, sep = ",", dec = ".")
DS_pKa   <- read.csv(here::here("1_data/ACD_pKas.csv"),header = TRUE, sep = ",", dec = ".")

nAnalytes=length(unique(DS$ID))

# calculating fractions of analytes in pH=2.658
pH <- 2.658
pKas <- DS_pKa[,3:5]
fr <- matrix(rep(0,nAnalytes*4),nAnalytes,4)
charge <- DS_pKa[,9:12] + DS_pKa[,13:16]
charge_pH <- rep(0,nAnalytes)
lambda <- rep(0,1026)
for(i in 1:nAnalytes){
  cums<-cumsum(c(pKas[i,]))
  x<-c()
  x[1]<-1
  for(j in 1:3){
    x[j+1]<- 10^(j*pH-cums[j])
  }
  fr[i, ] <- as.matrix(x/sum(x))
  charge_pH[i] <- charge[i,which.max(fr[i,])]
  lambda[i] <- sum(fr[i,which(charge[i,]==0)])
}

# calculation of logk versus fi curves
initial_param <- matrix(NA,nAnalytes,3)
for(i in 1:nAnalytes){
  if(length(DS$concentration[which(DS$ID==i)])==1){
    initial_param[i,2] <- polyfit(-16*DS$concentration[which(DS$ID==i)]/(1+2*DS$concentration[which(DS$ID==i)]),
                                  DS$logk[which(DS$ID==i)],0)
    initial_param[i,1] <- -16
  }else{
    initial_param[i,1:2] = 
      polyfit(DS$concentration[which(DS$ID==i)]/(1+2*DS$concentration[which(DS$ID==i)]),
              DS$logk[which(DS$ID==i)],1)
  }
}
initial_param[,3] <- rep(2,nAnalytes)

ID        <- unique(DS$ID)
logP_ACD  <- DS$logP_ACD[!duplicated(DS$ID)]
logkw     <- initial_param[,2]
logka     <- initial_param[,2] + initial_param[,1]/3
logS2     <- log10(initial_param[,3])

Parameters_basic_fit  <-  data.frame(ID,logP_ACD,logkw,logka,logS2)
rm(ID,logkw,logka,logS2,initial_param)

# indicating missing value of log P
idxmissing <- rep(0,1026)
idxmiss <- which(is.nan(DS$logP_ACD[!duplicated(DS$ID)]))
idxmissing[idxmiss] <- 1

DS$logP_ACD[which(DS$ID %in% idxmiss)] <- 0

lambda[which(lambda>0.999)]=0.999
lambda[which(lambda<0.001)]=0.001
```

```{r eval = FALSE}
logP=DS$logP_ACD[!duplicated(DS$ID)]
nObs=length(DS$ID)
analyte=DS$ID
logkObs=DS$logk
fi=DS$concentration
fiplot=seq(0,1,0.1)
nfiplot=length(fiplot)
run_estimation=1

# data to model
datastruct_prior = with(DS,
                    list(logP=DS$logP_ACD[!duplicated(DS$ID)],
                       idxmissing=idxmissing,
                       nAnalytes=nAnalytes,
                       nObs=nObs,
                       analyte=DS$ID,
                       logkObs=DS$logk, 
                       fi=DS$concentration,
                       rawlambdai=1-lambda,
                       nfiplot=length(fi),
                       fiplot=fi,
                       run_estimation=0))

datastruct = with(DS,
                  list(logP=DS$logP_ACD[!duplicated(DS$ID)],
                       idxmissing=idxmissing,
                       nAnalytes=nAnalytes,
                       nObs=nObs,
                       analyte=DS$ID,
                       logkObs=DS$logk, 
                       fi=DS$concentration,
                       rawlambdai=1-lambda,
                       nfiplot=length(fi),
                       fiplot=fi,
                       run_estimation=1))

# declaring initial values for each variable in chains
init <- function(){
  list(logkwHat  = sort(c(rnorm(1,2,0.2),rnorm(1,2,0.2)+max(0,rnorm(1,2,0.5)))),
       logkaHat  = sort(c(rnorm(1,-4,0.2),rnorm(1,-4,0.2)+max(0,rnorm(1,2,0.5)))),
       logS2AHat = rnorm(2,log(2),0.2),
       
       omega1= c(1,1,0.1)*exp(rnorm(3,0,0.2)),
       rho1 = diag(1,3,3),
       omega2= c(1,1,0.1)*exp(rnorm(3,0,0.2)),
       rho2 = diag(1,3,3),
       
       beta = c(0.7,0.7,0.5,0.5,0,0)*exp(rnorm(6,0,0.2)),
       
       param1 = Parameters_basic_fit[,3:5]*0.9,
       param2 = Parameters_basic_fit[,3:5]*1.1,
       sigma  = rlnorm(1,log(0.1),0.2)
  )
}

# specifying parameters to analysis 
parametersToPlot <- c("logkwHat","logkaHat","logS2AHat","omega1","rho1","omega2","rho2","beta",
                      "param1","param2","sigma","logPmissing")
otherRVs <- c("logkCond","logkPlotACond","fracPred","log_lik","logkwPred","logkaPred","logS2APred",
              "logkHat","paramPred1","paramPred2","logkw","logka","logS2A","logkHatPred","log_likPred")

parameters <- c(parametersToPlot, otherRVs)
parametersToPlot <- c("lp__", parametersToPlot)

# fitting model
fit_prior <- stan(file="ACN002.stan",
            data=datastruct_prior,
            pars=parameters,
            iter=2000,
            warmup=1000,
            init=init,
            chains=4,thin=1,control = list(adapt_delta = 0.9,max_treedepth=15))

fit <- stan(file="ACN002.stan",
                   data=datastruct,
                   pars=parameters,
                   iter=2000,
                   warmup=1000,
                   init=init,
                   chains=4,thin=1,control = list(max_treedepth=12))

```

Below code preapering data to fit the model in supercomputer:

```{r message=FALSE}
logP=DS$logP_ACD[!duplicated(DS$ID)]
nAnalytes=length(unique(DS$ID))
nObs=length(DS$ID)
analyte=DS$ID
logkObs=DS$logk
fi=DS$concentration
fiplot=seq(0,1,0.1)
nfiplot=length(fiplot)
run_estimation=1

stan_rdump(c("logP",
             "nAnalytes", 
             "nObs",
             "idxmissing", 
             "analyte", 
             "logkObs", 
             "fi",
             "rawlambdai",
             "nfiplot",
             "fiplot",
             "run_estimation"),
           file="4_model_2/model.data.R")

for(i in 1:10){
  logkwHat  = sort(c(rnorm(1,2,0.2),rnorm(1,2,0.2)+max(0,rnorm(1,2,0.5))))
  logkaHat  = sort(c(rnorm(1,-4,0.2),rnorm(1,-4,0.2)+max(0,rnorm(1,2,0.5))))
  logS2AHat = rnorm(2,log(2),0.2)
  omega1= c(1,1,0.1)*exp(rnorm(3,0,0.2))
  rho1 = diag(1,3,3)
  omega2= c(1,1,0.1)*exp(rnorm(3,0,0.2))
  rho2 = diag(1,3,3)
  beta = c(0.7,0.7,0.5,0.5,0,0)*exp(rnorm(6,0,0.2))
  param1 = Parameters_basic_fit[,3:5]*0.9
  param2 = Parameters_basic_fit[,3:5]*1.1
  sigma  = rlnorm(1,log(0.1),0.2)
  
  stan_rdump(c("logkwHat","logkaHat","logS2AHat","beta","rho1","rho2","omega1","omega2","param1","param2","sigma"),
             file=paste("4_model_2/model_", i, ".init.R", sep=""))
}
```

## Summary of model parameters

Code for print summary of parameters from supercomputer:

```{r eval=FALSE}
fit <- cmdstanr::as_cmdstan_fit(c('4_model_2/output_1.csv',
                                  '4_model_2/output_2.csv',
                                  '4_model_2/output_3.csv',
                                  '4_model_2/output_4.csv',
                                  '4_model_2/output_5.csv',
                                  '4_model_2/output_6.csv',
                                  '4_model_2/output_7.csv',
                                  '4_model_2/output_8.csv',
                                  '4_model_2/output_9.csv',
                                  '4_model_2/output_10.csv'))

fit$print(c("logkwHat","logkaHat","logS2AHat","beta","rho1","rho2","omega1","omega2","param1","param2","sigma"), max_rows = 26)
```

Code for print summary of parameters from computer:

```{r}
load("4_model_2/Fit.Rsave")
load("4_model_2/Fit_sample.Rsave")

print(fit,pars=c("logkwHat","logkaHat","logS2AHat","beta","rho1","rho2","omega1","omega2","sigma"))
```

## Goodness of fit

```{r message=FALSE}
library(metRology) # function rt.scaled

logkPred <-array(rep(5097*4000),dim=c(4000,5097))
for(j in 1:nObs){
  for(k in 1:4000){
    logkPred[k,j]		= rt.scaled(1,7,fit_sample$logkHatPred[k,j], fit_sample$sigma[k])
  }
}

par(mfrow=c(1,2))
plot(apply(fit_sample$logkCond,2,mean),DS$logk,cex.lab=1.2,xlim=c(-4,6),ylim=c(-3,3),pch=20,col="blue",ylab=expression("Log k"[Obs]),xlab=expression("Log k"[Pred]))
lines(seq(-4,6,by=0.1),seq(-4,6,by=0.1),lwd=2)
plot(apply(logkPred,2,mean),DS$logk,cex.lab=1.2,xlim=c(-4,6),ylim=c(-3,3),pch=20,col="blue",ylab=expression("Log k"[Obs]),xlab=expression("Log k"[Pred]))
lines(seq(-4,6,by=0.1),seq(-4,6,by=0.1),lwd=2)
```

### WAIC

```{r message=FALSE}
library(loo)
waic(extract_log_lik(fit)) # to samo co: waic(fit_sample$log_lik)
loo(extract_log_lik(fit))
```

## Predictions

Individual predictions

```{r}
library(ggpubr)

nazwy <- c("Caffeine","Chlorpropamide","Doxepin hydrochloride","Perphenazine",
  "Pindolol","Phenylbutazone","Procainamide hydrochloride","Retinoic acid",
  "Sulfaphenazole","Tolbutamide","Ketoprofen","Indomethacin")
l_nazwy <- which(DS_names$Analyte[!duplicated(DS_names$ID)] %in% nazwy)

plots <- list()
for(i in 1:nAnalytes){
  l <- apply(drop(fit_sample$logkPlotACond[,i,]), MARGIN = 2, FUN = quantile, probs = c(.025,.5,.975))
  logk_prct <- as.data.frame(cbind(rep(i,11),fiplot,t(l)))
  colnames(logk_prct)<-c("ID","concentration","low","median","high")
  plots[[i]] <- ggplot()+ xlim(0,1) +
    geom_point(data=subset(DS, ID == i), aes(x = concentration, y = logk), col="blue") +
    geom_line(data=subset(logk_prct, ID == i), aes(x = fiplot, y = median), col="blue") +
    geom_ribbon(data=subset(logk_prct, ID == i), aes(x = fiplot, 
                                                     ymin = low, 
                                                     ymax = high), alpha = 0.25, fill="blue")+
    coord_cartesian(ylim = c(-3, 4)) + 
    labs(title = paste(DS$Names[which(DS$ID==i)]),
         x = NULL,
         y = NULL) +
    theme(text = element_text(size = 9), axis.text = element_text(size = 9),
          legend.position = "none", strip.text = element_text(size = 6)) 
}
figure1 <- ggarrange(plotlist = plots[l_nazwy], nrow=3,ncol = 4)
annotate_figure(figure1,
                bottom = text_grob(expression(varphi)),
                left = text_grob("log k", rot = 90))
```

Population predictions

```{r}
hplc <- function(fi,logkw,logka,logS2A){
  S1 = (logkw - logka)*(1+10^logS2A)
  logk = logkw - S1 * fi / (1 + 10^logS2A * fi)
  return(logk)
}

logkHatPlotAPred <-array(rep(0,11*1026*8000),dim=c(8000,1026,11))
logkPlotAPred <-array(rep(0,11*1026*8000),dim=c(8000,1026,11))

for(j in 1:nAnalytes){
  for(z in 1:nfiplot){
    for(k in 1:8000){
      logkHatPlotAPred[k,j,z]	= hplc(fiplot[z], fit_sample$logkwPred[k,j],
                                   fit_sample$logkaPred[k,j], fit_sample$logS2APred[k,j])
      logkPlotAPred[k,j,z]		= rt.scaled(1,7,logkHatPlotAPred[k,j,z], fit_sample$sigma[k])
    }
  }
}

plots <- list()
for(i in 1:nAnalytes){
  l <- apply(drop(logkPlotAPred[,i,]), MARGIN = 2, FUN = quantile, probs = c(.025,.5,.975))
  logk_prct <- as.data.frame(cbind(rep(i,11),fiplot,t(l)))
  colnames(logk_prct)<-c("ID","concentration","low","median","high")
  plots[[i]] <- ggplot()+ xlim(0,1) +
    geom_point(data=subset(DS, ID == i), aes(x = concentration, y = logk), col="blue") +
    geom_line(data=subset(logk_prct, ID == i), aes(x = fiplot, y = median), col="red") +
    geom_ribbon(data=subset(logk_prct, ID == i), aes(x = fiplot, 
                                                     ymin = low, 
                                                     ymax = high), alpha = 0.25, fill="red")+
    coord_cartesian(ylim = c(-3, 4)) + 
    labs(title = paste(DS$Names[which(DS$ID==i)]),
         x = NULL,
         y = NULL) +
    theme(text = element_text(size = 9), axis.text = element_text(size = 9),
          legend.position = "none", strip.text = element_text(size = 6)) 
}
figure1 <- ggarrange(plotlist = plots[l_nazwy], nrow=3,ncol = 4)
annotate_figure(figure1,
                bottom = text_grob(expression(varphi)),
                left = text_grob("log k", rot = 90))
```
